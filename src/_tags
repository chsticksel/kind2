# Build native code debug parser
<Camlp4DebugParser.ml>: pp(camlp4rf),use_camlp4,use_dynlink

# Use native code version of camlp4 and native code debug parser
# (from http://mancoosi.org/~abate/two-simple-tips-speed-ocaml-compilation)
<*.ml{,i}>: pp(camlp4o.opt -parser Camlp4DebugParser.cmxs)

# Do not traverse all directories by default - excludes .svn, .git etc.
# Must list all subdirectories explicitly
# (from http://mancoosi.org/~abate/two-simple-tips-speed-ocaml-compilation)
true: -traverse
<{kind1}/**>: traverse

# Pack all modules into Kind1 to avoid cluttering the namespace
<kind1/*.cmx>: for-pack(Kind1)

# Compile everything with debug symbols and .annot file for type information
<*.ml>: debug,annot
<kind1/*.ml>: debug,annot

# Use Unix, Str, ZMQ and Thread modules  
<*.native>: package(num),package(unix),package(str),use_ZMQ,thread,package(cmdliner)
# use_nums,use_unix,use_str,use_ZMQ,thread
<*.byte>: use_nums,use_unix,use_str,use_ZMQ,thread
<*.top>: debug,use_nums,use_unix,use_str,use_ZMQ,thread

# Source files that use the Thread and ZMQ modules
<messaging.ml>: thread,use_ZMQ
<messaging.mli>: thread
<lib.ml>: thread

<test_kind2.ml>: package(cmdliner)

# Obsolete 

# <invarManager.ml>: thread
# <kind2.ml>: thread
# <threadtest.ml>: thread
# <zmq_io_bug.ml>: thread,use_ZMQ
# <dummy.ml>: thread
# <SExpr>: include
# <SExpr/*.cmx>: for-pack(SExpr)
# <SExpr/*.p.cmx>: for-pack(SExpr)

